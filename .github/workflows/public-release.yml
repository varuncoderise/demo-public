name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

env:
  DEFAULT_TAG: v1.0.0
  TIMEZONE: Asia/Kolkata
  BOT_NAME: coderiseio-bot
  BOT_EMAIL: coderiseio@bot.com
  REPO: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      # Calculate 3-Digit Version
      - name: Calculate 3-Digit Version
        id: version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Fetching tags"
          git fetch --tags --force
          LAST_TAG=$(git tag --sort=-v:refname | head -n1 || echo "${{ env.DEFAULT_TAG }}")
          echo "Latest tag: $LAST_TAG"

          # Validate LAST_TAG format
          if [[ ! "$LAST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid LAST_TAG format: $LAST_TAG. Using DEFAULT_TAG: ${{ env.DEFAULT_TAG }}"
            LAST_TAG="${{ env.DEFAULT_TAG }}"
          fi

          # Check if LAST_TAG exists
          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            echo "LAST_TAG $LAST_TAG exists."
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          else
            echo "First release scenario â€” setting version to DEFAULT_TAG: $DEFAULT_TAG"
            echo "NEW_VERSION=$DEFAULT_TAG" >> $GITHUB_ENV
            BARE_VERSION="${DEFAULT_TAG#v}"
            echo "BARE_VERSION=$BARE_VERSION" >> $GITHUB_ENV
            echo "RELEASE_TYPE=initial" >> $GITHUB_ENV
            echo "CHANGELOG_SECTION=Initial Release" >> $GITHUB_ENV
            echo "BREAKING_CHANGES=false" >> $GITHUB_ENV
            echo "BREAKING_COMMITS=" >> $GITHUB_ENV
            echo "OTHER_COMMITS=" >> $GITHUB_ENV
            exit 0
          fi          
          echo "Commit range: $COMMIT_RANGE"

          # Parse current version
          VERSION=${LAST_TAG#v}
          echo "VERSION: $VERSION"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          echo "Parsed version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Validate parsed values
          if ! [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
            exit 1
          fi

          # --- Extract current versions robustly ---
          CURRENT_VERSION=$(grep -i "Version:" servv.php | head -n1 | sed -E 's/.*Version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Current version in PHP file: ${CURRENT_VERSION:-none}"

          CURRENT_STABLE=$(grep -i "Stable tag:" readme.txt | head -n1 | sed -E 's/.*Stable tag:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Current Stable tag in readme.txt: ${CURRENT_STABLE:-none}"

          # --- Determine release type and version ---
          PR_NUMBER=${{ github.event.pull_request.number }}
          LABELS=$(GH_TOKEN=${{ secrets.PAT_TOKEN }} gh pr view $PR_NUMBER --json labels --jq '.labels[].name')
          echo "PR labels: $LABELS"

          if echo "$LABELS" | grep -q "^release:major$"; then
            RELEASE_TYPE="major"; MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0; CHANGELOG_SECTION="Feature Release"; BREAKING_CHANGES="true"
          elif echo "$LABELS" | grep -q "^release:minor$"; then
            RELEASE_TYPE="minor"; MINOR=$((MINOR + 1)); PATCH=0; CHANGELOG_SECTION="Feature Release"; BREAKING_CHANGES="false"
          elif echo "$LABELS" | grep -q "^release:patch$"; then
            RELEASE_TYPE="patch"; PATCH=$((PATCH + 1)); CHANGELOG_SECTION="Maintenance Release"; BREAKING_CHANGES="false"
          elif echo "$LABELS" | grep -q "^release:hotfix$"; then
            RELEASE_TYPE="hotfix"; PATCH=$((PATCH + 1)); CHANGELOG_SECTION="Hotfix Release"; BREAKING_CHANGES="false"
          else
            RELEASE_TYPE="none"; CHANGELOG_SECTION="Maintenance Release"; BREAKING_CHANGES="false"
          fi

          echo "Release type: $RELEASE_TYPE"
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "BREAKING_CHANGES=$BREAKING_CHANGES" >> $GITHUB_ENV

          if [ "$RELEASE_TYPE" != "none" ]; then
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            BARE_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "NEW_VERSION=$NEW_VERSION"
            echo "BARE_VERSION=$BARE_VERSION"
            # Validate NEW_VERSION format
            if [[ ! "$NEW_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Invalid version format for NEW_VERSION: $NEW_VERSION"
              exit 1
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "BARE_VERSION=$BARE_VERSION" >> $GITHUB_ENV
            echo "CHANGELOG_SECTION=$CHANGELOG_SECTION" >> $GITHUB_ENV

            # --- Update servv.php and readme.txt together ---
            CHANGED=false
            if [ "$CURRENT_VERSION" != "$BARE_VERSION" ]; then
              sed -i "s/Version:[[:space:]]*.*/Version: $BARE_VERSION/" servv.php
              CHANGED=true
            fi

            if [ "$CURRENT_STABLE" != "$BARE_VERSION" ]; then
              if grep -q "Stable tag:" readme.txt; then
                sed -i "s/Stable tag:[[:space:]]*.*/Stable tag: $BARE_VERSION/" readme.txt
              else
                echo "Stable tag: $BARE_VERSION" >> readme.txt
              fi
              CHANGED=true
            fi

            if [ "$CHANGED" = true ]; then
              git config user.name "${{ env.BOT_NAME }}"
              git config user.email "${{ env.BOT_EMAIL }}"
              git add servv.php readme.txt
              git commit -m "Update version and stable tag to $BARE_VERSION"
              git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
              git push origin main
              echo "Updated version and stable tag to $BARE_VERSION"
            else
              echo "No changes required, already at $BARE_VERSION"
            fi
          else
            echo "No release will be created (RELEASE_TYPE=none)"
            echo "NEW_VERSION=" >> $GITHUB_ENV
            echo "BARE_VERSION=" >> $GITHUB_ENV
          fi

          # Get commit SHA
          COMMIT_SHA=$(git log -1 --no-merges --pretty=%H)
          SHORT_COMMIT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "SHORT_COMMIT_SHA=$SHORT_COMMIT_SHA" >> $GITHUB_ENV
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

          # Collect commit messages, excluding servv.php version updates
          COMMIT_MSG=$(git log -1 --no-merges --pretty=%B || echo "")
          if [[ "$COMMIT_MSG" =~ $'\n' ]]; then
            # Multi-line commit message
            FORMATTED_MD=$(echo "$COMMIT_MSG" | sed 's/^- /  /; s/^[^-]/- /' | grep -v "Update version to")
            echo "OTHER_COMMITS<<EOF" >> $GITHUB_ENV
            echo "$FORMATTED_MD" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "BREAKING_COMMITS=" >> $GITHUB_ENV
          else
            # Single-line commit message, process all commits
            COMMITS=$(git log $COMMIT_RANGE --no-merges --pretty="%h %s" -n 20 || echo "")
            BREAKING_MD=""
            OTHER_MD=""
            while IFS=' ' read -r SHA MSG; do
              CLEAN_MSG=$(echo "$MSG" | sed -E 's/^(feat!?:|fix:|hotfix:|docs:|style:|refactor:|perf:|test:|chore:)//')
              if [ -n "$CLEAN_MSG" ] && ! echo "$MSG" | grep -q "Update version to"; then
                FORMATTED_MD="- $CLEAN_MSG [$SHA](https://github.com/${{ env.REPO }}/commit/$SHA)"
                if echo "$MSG" | grep -q "^feat!:"; then
                  BREAKING_MD="$BREAKING_MD\n$FORMATTED_MD"
                else
                  OTHER_MD="$OTHER_MD\n$FORMATTED_MD"
                fi
              fi
            done <<< "$COMMITS"
            BREAKING_MD=$(echo -e "$BREAKING_MD" | sed '/^$/d')
            OTHER_MD=$(echo -e "$OTHER_MD" | sed '/^$/d')
            echo "BREAKING_COMMITS<<EOF" >> $GITHUB_ENV
            echo "$BREAKING_MD" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "OTHER_COMMITS<<EOF" >> $GITHUB_ENV
            echo "$OTHER_MD" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # Generate changelog
      - name: Generate Changelog
        if: env.NEW_VERSION != ''
        run: |
          echo "Generating changelog for ${{ env.NEW_VERSION }}"
          {
            echo "# ${{ env.NEW_VERSION }}"
            echo ""
            echo "${{ env.BARE_VERSION }} ($(TZ=${{ env.TIMEZONE }} date +%Y-%m-%d))"
            echo ""
            if [ "${{ env.BREAKING_CHANGES }}" = "true" ] && [ -n "${{ env.BREAKING_COMMITS }}" ]; then
              echo "BREAKING CHANGES"
              echo ""
              echo "${{ env.BREAKING_COMMITS }}"
              echo ""
            fi
            echo "${{ env.CHANGELOG_SECTION }}"
            echo ""
            if [ -n "${{ env.OTHER_COMMITS }}" ]; then
              echo "${{ env.OTHER_COMMITS }}"
            else
              echo "- No changes recorded for this release"
            fi
          } > changelog_temp.md

          if [[ -f CHANGELOG.md ]]; then
            echo "" >> changelog_temp.md
            cat CHANGELOG.md >> changelog_temp.md
          fi
          mv changelog_temp.md CHANGELOG.md

          git add CHANGELOG.md
          git config user.name "${{ env.BOT_NAME }}"
          git config user.email "${{ env.BOT_EMAIL }}"
          git commit -m "update changelog for ${{ env.NEW_VERSION }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
          git push origin main

      # Create source code zip
      - name: Create Source Code Zip
        if: env.NEW_VERSION != ''
        run: |
          REPO_NAME="servvai-event-booking"
          ZIP_NAME="${REPO_NAME}-${{ env.NEW_VERSION }}.zip"
          git archive --format=zip --output="${ZIP_NAME}" HEAD $(git ls-files | grep -v '^\.' | grep -v '/\.')
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV

      # Debug zip contents
      - name: Debug Zip Contents
        if: env.NEW_VERSION != ''
        run: unzip -l "${ZIP_NAME}"

      - name: Create Tag and Release
        if: env.NEW_VERSION != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          echo "=== Create Tag and Release: ${{ env.NEW_VERSION }} ==="

          # Ensure we have all tags locally
          git fetch --tags --no-recurse-submodules

          echo "Checking if tag ${{ env.NEW_VERSION }} exists locally..."
          if git rev-parse "${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.NEW_VERSION }} already exists locally â€” aborting."
            exit 1
          fi

          # Configure Git
          git config user.name "${{ env.BOT_NAME }}"
          git config user.email "${{ env.BOT_EMAIL }}"

          # Create and push tag
          git tag -a "${{ env.NEW_VERSION }}" -m "release ${{ env.NEW_VERSION }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
          git push origin "${{ env.NEW_VERSION }}"
          echo "Tag ${{ env.NEW_VERSION }} pushed."

          echo "Generating formatted release notes..."

          # Determine safe commit range
          LAST_TAG="${LAST_TAG:-}"
          if [ -n "$LAST_TAG" ] && git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            BASE_RANGE="$LAST_TAG..HEAD"
            echo "Using commit range based on LAST_TAG: $BASE_RANGE"
          else
            BASE_RANGE="HEAD~20..HEAD"
            echo "LAST_TAG not available locally; falling back to last 20 commits: $BASE_RANGE"
          fi

          # Collect commits safely
          set +e
          RAW_COMMITS=$(git log ${BASE_RANGE} --no-merges --pretty=format:"%h|%B" 2>/dev/null || true)
          set -e

          # Filter out housekeeping commits (case-insensitive)
          FILTERED_COMMITS=$(echo "$RAW_COMMITS" | awk 'BEGIN{IGNORECASE=1} !/update version|update changelog|update public-release|bump version|update version and stable tag/ {print}')

          RELEASE_DATE=$(TZ=${TIMEZONE} date +%Y-%m-%d)

          # Initialize release_notes.md
          {
            echo "Release: ${{ env.NEW_VERSION }}"
            echo "${{ env.NEW_VERSION }}"
            echo "${{ env.BARE_VERSION }} ($RELEASE_DATE)"
            echo ""
            echo "${{ env.CHANGELOG_SECTION }}"
            echo ""
          } > release_notes.md

          # Process commits (multi-line safe)
          if [ -n "$FILTERED_COMMITS" ]; then
            while IFS='|' read -r SHA MSG; do
              # Clean message: trim spaces and remove leading dash
              CLEAN_MSG=$(echo "$MSG" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed 's/^- //')
              while IFS= read -r LINE; do
                LINE_TRIM=$(echo "$LINE" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                if [ -n "$LINE_TRIM" ]; then
                  echo "$LINE_TRIM [$SHA](https://github.com/${{ env.REPO }}/commit/$SHA)" >> release_notes.md
                fi
              done <<< "$CLEAN_MSG"
            done <<< "$FILTERED_COMMITS"
          else
            echo "- No significant commits in this release" >> release_notes.md
          fi

          echo "----- Generated release_notes.md -----"
          cat release_notes.md
          echo "--------------------------------------"

          # Create GitHub release
          GH_TOKEN=${{ secrets.PAT_TOKEN }} gh release create "${{ env.NEW_VERSION }}" \
            --title "Release: ${{ env.NEW_VERSION }}" \
            --notes-file release_notes.md \
            "${{ env.ZIP_NAME }}#Clean Package"
