name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

env:
  DEFAULT_TAG: v1.0.0
  TIMEZONE: Asia/Kolkata
  BOT_NAME: coderiseio-bot
  BOT_EMAIL: coderiseio@bot.com
  REPO: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      # Calculate 3-Digit Version
      - name: Calculate 3-Digit Version
        id: version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Fetching tags"
          git fetch --tags --force
          LAST_TAG=$(git tag --sort=-v:refname | head -n1 || echo "${{ env.DEFAULT_TAG }}")
          echo "Latest tag: $LAST_TAG"

          # Validate LAST_TAG format
          if [[ ! "$LAST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid LAST_TAG format: $LAST_TAG. Using DEFAULT_TAG: ${{ env.DEFAULT_TAG }}"
            LAST_TAG="${{ env.DEFAULT_TAG }}"
          fi

          # Check if LAST_TAG exists
          if git rev-parse "$LAST_TAG" >/dev/null 2>&1; then
            echo "LAST_TAG $LAST_TAG exists."
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          else
            echo "First release scenario â€” setting version to DEFAULT_TAG: $DEFAULT_TAG"
            echo "NEW_VERSION=$DEFAULT_TAG" >> $GITHUB_ENV
            BARE_VERSION="${DEFAULT_TAG#v}"
            echo "BARE_VERSION=$BARE_VERSION" >> $GITHUB_ENV
            echo "RELEASE_TYPE=initial" >> $GITHUB_ENV
            echo "CHANGELOG_SECTION=Initial Release" >> $GITHUB_ENV
            echo "BREAKING_CHANGES=false" >> $GITHUB_ENV
            echo "BREAKING_COMMITS=" >> $GITHUB_ENV
            echo "OTHER_COMMITS=" >> $GITHUB_ENV
            exit 0
          fi          
          echo "Commit range: $COMMIT_RANGE"

          # Parse current version
          VERSION=${LAST_TAG#v}
          echo "VERSION: $VERSION"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          echo "Parsed version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Validate parsed values
          if ! [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
            exit 1
          fi

          # --- Extract current versions robustly ---
          CURRENT_VERSION=$(grep -i "Version:" servv.php | head -n1 | sed -E 's/.*Version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Current version in PHP file: ${CURRENT_VERSION:-none}"

          CURRENT_STABLE=$(grep -i "Stable tag:" readme.txt | head -n1 | sed -E 's/.*Stable tag:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Current Stable tag in readme.txt: ${CURRENT_STABLE:-none}"

          # --- Determine release type and version ---
          PR_NUMBER=${{ github.event.pull_request.number }}
          LABELS=$(GH_TOKEN=${{ secrets.PAT_TOKEN }} gh pr view $PR_NUMBER --json labels --jq '.labels[].name')
          echo "PR labels: $LABELS"

          if echo "$LABELS" | grep -q "^release:major$"; then
            RELEASE_TYPE="major"; MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0; CHANGELOG_SECTION="Feature Release"; BREAKING_CHANGES="true"
          elif echo "$LABELS" | grep -q "^release:minor$"; then
            RELEASE_TYPE="minor"; MINOR=$((MINOR + 1)); PATCH=0; CHANGELOG_SECTION="Feature Release"; BREAKING_CHANGES="false"
          elif echo "$LABELS" | grep -q "^release:patch$"; then
            RELEASE_TYPE="patch"; PATCH=$((PATCH + 1)); CHANGELOG_SECTION="Maintenance Release"; BREAKING_CHANGES="false"
          elif echo "$LABELS" | grep -q "^release:hotfix$"; then
            RELEASE_TYPE="hotfix"; PATCH=$((PATCH + 1)); CHANGELOG_SECTION="Hotfix Release"; BREAKING_CHANGES="false"
          else
            RELEASE_TYPE="none"; CHANGELOG_SECTION="Maintenance Release"; BREAKING_CHANGES="false"
          fi

          echo "Release type: $RELEASE_TYPE"
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "BREAKING_CHANGES=$BREAKING_CHANGES" >> $GITHUB_ENV

          if [ "$RELEASE_TYPE" != "none" ]; then
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            BARE_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "NEW_VERSION=$NEW_VERSION"
            echo "BARE_VERSION=$BARE_VERSION"
            # Validate NEW_VERSION format
            if [[ ! "$NEW_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Invalid version format for NEW_VERSION: $NEW_VERSION"
              exit 1
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "BARE_VERSION=$BARE_VERSION" >> $GITHUB_ENV
            echo "CHANGELOG_SECTION=$CHANGELOG_SECTION" >> $GITHUB_ENV

            # --- Update servv.php and readme.txt together ---
            CHANGED=false
            if [ "$CURRENT_VERSION" != "$BARE_VERSION" ]; then
              sed -i "s/Version:[[:space:]]*.*/Version: $BARE_VERSION/" servv.php
              CHANGED=true
            fi

            if [ "$CURRENT_STABLE" != "$BARE_VERSION" ]; then
              if grep -q "Stable tag:" readme.txt; then
                sed -i "s/Stable tag:[[:space:]]*.*/Stable tag: $BARE_VERSION/" readme.txt
              else
                echo "Stable tag: $BARE_VERSION" >> readme.txt
              fi
              CHANGED=true
            fi

            if [ "$CHANGED" = true ]; then
              git config user.name "${{ env.BOT_NAME }}"
              git config user.email "${{ env.BOT_EMAIL }}"
              git add servv.php readme.txt
              git commit -m "Update version and stable tag to $BARE_VERSION"
              git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
              git push origin main
              echo "Updated version and stable tag to $BARE_VERSION"
            else
              echo "No changes required, already at $BARE_VERSION"
            fi
          else
            echo "No release will be created (RELEASE_TYPE=none)"
            echo "NEW_VERSION=" >> $GITHUB_ENV
            echo "BARE_VERSION=" >> $GITHUB_ENV
          fi

          # Collect commit messages, excluding servv.php and readme.txt updates, as flat bullet points with correct SHA
          COMMITS=$(git log $COMMIT_RANGE --no-merges --pretty=format:"%H%n%B%n---COMMIT-END---" || echo "")
          ALL_COMMITS_MD=""
          i=0
          while [ $i -lt ${#COMMITS[@]} ]; do
            SHA="${COMMITS[$i]}"; ((i++))
            FULL_MSG=""
            while [ $i -lt ${#COMMITS[@]} ] && [ "${COMMITS[$i]}" != "---COMMIT-END---" ]; do
              FULL_MSG="$FULL_MSG${COMMITS[$i]}$'\n'"
              ((i++))
            done
            ((i++))  # Skip delimiter

            # Skip version update commits
            if echo "$FULL_MSG" | grep -q "Update version and stable tag"; then
              continue
            fi
            # Process all lines as bullet points with SHA at end
            while IFS= read -r LINE; do
              if [ -n "$LINE" ] && ! echo "$LINE" | grep -q "^Update version"; then
                ALL_COMMITS_MD="$ALL_COMMITS_MD\n- $LINE [$SHA:0:7](https://github.com/${{ env.REPO }}/commit/$SHA)"
              fi
            done <<< "$FULL_MSG"
          done
          ALL_COMMITS_MD=$(echo -e "$ALL_COMMITS_MD" | sed '/^$/d' | tail -c +2)
          echo "OTHER_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$ALL_COMMITS_MD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "BREAKING_COMMITS=" >> $GITHUB_ENV

      # Generate changelog
      - name: Generate Changelog
        if: env.NEW_VERSION != ''
        run: |
          echo "Generating changelog for ${{ env.NEW_VERSION }}"
          {
            echo "# ${{ env.NEW_VERSION }}"
            echo ""
            echo "${{ env.BARE_VERSION }} ($(TZ=${{ env.TIMEZONE }} date +%Y-%m-%d))"
            echo ""
            echo "${{ env.CHANGELOG_SECTION }}"
            echo ""
            if [ -n "${{ env.OTHER_COMMITS }}" ]; then
              echo "${{ env.OTHER_COMMITS }}"
            else
              echo "- No changes recorded for this release"
            fi
          } > changelog_temp.md

          if [[ -f CHANGELOG.md ]]; then
            echo "" >> changelog_temp.md
            cat CHANGELOG.md >> changelog_temp.md
          fi
          mv changelog_temp.md CHANGELOG.md

          git add CHANGELOG.md
          git config user.name "${{ env.BOT_NAME }}"
          git config user.email "${{ env.BOT_EMAIL }}"
          git commit -m "update changelog for ${{ env.NEW_VERSION }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
          git push origin main

      # Create source code zip
      - name: Create Source Code Zip
        if: env.NEW_VERSION != ''
        run: |
          REPO_NAME="servise-event-booking"
          ZIP_NAME="${REPO_NAME}-${{ env.NEW_VERSION }}.zip"
          git archive --format=zip --output="${ZIP_NAME}" HEAD $(git ls-files | grep -v '^\.' | grep -v '/\.')
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV

      # Debug zip contents
      - name: Debug Zip Contents
        if: env.NEW_VERSION != ''
        run: unzip -l "${ZIP_NAME}"

      # Create tag and release
      - name: Create Tag and Release
        if: env.NEW_VERSION != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Checking if tag ${{ env.NEW_VERSION }} exists..."
          if git rev-parse "${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ env.NEW_VERSION }} already exists."
            exit 1
          fi
          git config user.name "${{ env.BOT_NAME }}"
          git config user.email "${{ env.BOT_EMAIL }}"
          git tag -a "${{ env.NEW_VERSION }}" -m "release ${{ env.NEW_VERSION }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.REPO }}.git
          git push origin "${{ env.NEW_VERSION }}"

          echo "Creating GitHub release..."
          {
            echo "# ${{ env.NEW_VERSION }}"
            echo ""
            echo "${{ env.BARE_VERSION }} ($(TZ=${{ env.TIMEZONE }} date +%Y-%m-%d))"
            echo ""
            echo "${{ env.CHANGELOG_SECTION }}"
            echo ""
            if [ -n "${{ env.OTHER_COMMITS }}" ]; then
              echo "${{ env.OTHER_COMMITS }}"
            else
              echo "- No changes recorded for this release"
            fi
          } > release_notes.md
          GH_TOKEN=${{ secrets.PAT_TOKEN }} gh release create "${{ env.NEW_VERSION }}" \
            --title "Release: ${{ env.NEW_VERSION }}" \
            --notes-file release_notes.md \
            "${{ env.ZIP_NAME }}#Clean Package"