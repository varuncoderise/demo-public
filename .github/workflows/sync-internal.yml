name: Sync from Private Repo

on:
  repository_dispatch:
    types: [sync-request]

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # Checkout public repo develop branch
      - name: Checkout public repo
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # Check Git environment
      - name: Check Git environment
        run: |
          echo "Git version:"
          git --version
          echo "Git configuration:"
          git config --list
          echo "Checking DNS resolution for github.com:"
          nslookup github.com
          echo "Checking network connectivity to GitHub:"
          ping -c 4 github.com || echo "Ping failed, continuing..."

      #  Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh
          echo "GitHub CLI version:"
          gh --version

      # Authenticate GitHub CLI
      - name: Authenticate gh
        run: |
          echo "Authenticating GitHub CLI"
          echo "${{ secrets.PAT_TOKEN }}" | gh auth login --with-token
          gh auth status || { echo "GitHub CLI authentication failed"; exit 1; }

      - name: Clone private repo
        run: |
          echo "Cloning private repo: varuncoderise/demo-internal"
          for i in {1..3}; do
            git clone --branch release/4x https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/varuncoderise/demo-internal.git private-repo && break
            echo "Clone attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          if [ ! -d "private-repo" ]; then
            echo "Failed to clone private repo after 3 attempts"
            echo "Listing available branches for debugging:"
            git ls-remote https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/varuncoderise/demo-internal.git
            exit 1
          fi
          echo "Listing branches in private repo:"
          cd private-repo
          git branch -a

      - name: Compare and sync commits
        run: |
          echo "Comparing files between private and public repos"
          cd private-repo
          # Remove unwanted files
          rm -rf .github
          rm -f CHANGELOG.md
          find . -maxdepth 1 -type f -name ".*" -exec rm -f {} \;
          # Create temporary branch for private repo
          git checkout -b temp-sync
          git add .
          git commit -m "Clean private repo files" || echo "No cleanup needed"
          # Copy files to public repo for comparison
          cp -r ./* ../
          cd ..
          # Add private repo as a remote
          git remote add private ./private-repo
          git fetch private temp-sync
          # Compare and list differing files
          echo "Files changed between public/develop and private/release/4x:"
          git diff --name-only develop private/temp-sync
          # Get commits from private repo not in public/develop
          commits=$(git log --reverse --pretty=format:"%H" develop..private/temp-sync)
          if [ -n "$commits" ]; then
            echo "Cherry-picking commits:"
            for commit in $commits; do
              echo "Cherry-picking $commit"
              git cherry-pick -x $commit || { echo "Cherry-pick failed for $commit"; git cherry-pick --abort; }
            done
          else
            echo "No new commits to sync"
          fi
          # Remove temporary remote
          git remote remove private

      - name: Push develop
        run: |
          echo "Pushing to develop branch"
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git push origin develop


      - name: Create PR develop to main
        run: |
          echo "Checking for existing PR"
          PR_EXISTS=$(gh pr list --head develop --base main --json number --jq '.[0].number' || echo "")
          if [ -z "$PR_EXISTS" ]; then
            echo "Creating new PR from develop to main"
            gh pr create \
              --head develop \
              --base main \
              --title "Sync develop â†’ main" \
              --body "Automated PR syncing latest code from private repo release/4x" || { echo "Failed to create PR"; exit 1; }
          else
            echo "PR from develop to main already exists: $PR_EXISTS"
