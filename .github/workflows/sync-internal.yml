name: Sync from Private Repo

on:
  repository_dispatch:
    types: [sync-request]

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # Checkout public repo develop branch
      - name: Checkout public repo
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # Check Git environment
      - name: Check Git environment
        run: |
          echo "Git version:"
          git --version
          echo "Git configuration:"
          git config --list
          echo "Checking DNS resolution for github.com:"
          nslookup github.com
          echo "Checking network connectivity to GitHub:"
          ping -c 4 github.com || echo "Ping failed, continuing..."

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh
          echo "GitHub CLI version:"
          gh --version

      # Authenticate GitHub CLI
      - name: Authenticate gh
        run: |
          echo "Authenticating GitHub CLI"
          echo "${{ secrets.PAT_TOKEN }}" | gh auth login --with-token
          gh auth status || { echo "GitHub CLI authentication failed"; exit 1; }

      # Clone private repo with retry
      - name: Clone private repo
        run: |
          echo "Cloning private repo: varuncoderise/demo-internal"
          for i in {1..3}; do
            git clone --branch release/4x https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/varuncoderise/demo-internal.git private-repo && break
            echo "Clone attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          if [ ! -d "private-repo" ]; then
            echo "Failed to clone private repo after 3 attempts"
            echo "Listing available branches for debugging:"
            git ls-remote https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/varuncoderise/demo-internal.git
            exit 1
          fi
          echo "Listing branches in private repo:"
          cd private-repo
          git branch -a

      # Preserve public repo files
      - name: Backup public repo files
        run: |
          if [ -d ".github" ]; then
            echo "Backing up public repo .github"
            cp -r .github github-backup
          else
            echo "No .github directory found in public repo"
          fi
          if [ -f "CHANGELOG.md" ]; then
            echo "Backing up public repo CHANGELOG.md"
            cp CHANGELOG.md changelog-backup.md
          else
            echo "No CHANGELOG.md found in public repo"
          fi

      # Fetch latest release info and sync files
      - name: Sync files and commit with release info
        run: |
          echo "Setting Git identity"
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          echo "Preparing private repo"
          cd private-repo
          # Remove unwanted files from private repo
          rm -rf .github
          rm -f CHANGELOG.md
          find . -type f -name ".*" -exec rm -f {} \;
          # Fetch latest release info
          echo "Fetching latest release from varuncoderise/demo-internal"
          RELEASE_INFO=$(gh release view --repo varuncoderise/demo-internal --json tagName,name,body -q '.name + "\n" + .body' || echo "No release found")
          if [ -z "$RELEASE_INFO" ]; then
            COMMIT_MESSAGE="Sync changes from private repo release/4x"
          else
            COMMIT_MESSAGE="$RELEASE_INFO"
          fi
          echo "Commit message:"
          echo "$COMMIT_MESSAGE"
          cd ..
          # Remove existing files in public repo (except backups)
          find . -maxdepth 1 -type f -not -name "changelog-backup.md" -not -name "*.yml" -not -name "*.yaml" -exec rm -f {} \;
          find . -maxdepth 1 -type d -not -name "private-repo" -not -name "github-backup" -not -name ".git" -exec rm -rf {} \;
          # Copy files from private repo
          cp -r private-repo/* .
          # Restore public repo files
          if [ -d "github-backup" ]; then
            echo "Restoring public repo .github"
            rm -rf .github
            mv github-backup .github
          fi
          if [ -f "changelog-backup.md" ]; then
            echo "Restoring public repo CHANGELOG.md"
            mv changelog-backup.md CHANGELOG.md
          fi
          # Remove private-repo directory
          rm -rf private-repo
          # Stage and commit changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "$COMMIT_MESSAGE"
          fi

      # Push develop branch
      - name: Push develop
        run: |
          echo "Pushing to develop branch"
          git push origin develop

      # Create PR develop to main
      - name: Create PR develop → main
        run: |
          echo "Checking for existing PR"
          PR_EXISTS=$(gh pr list --head develop --base main --json number --jq '.[0].number' || echo "")
          if [ -z "$PR_EXISTS" ]; then
            echo "Creating new PR from develop to main"
            gh pr create \
              --head develop \
              --base main \
              --title "Sync develop → main" \
              --body "Automated PR syncing changed files from private repo release/4x" || { echo "Failed to create PR"; exit 1; }
          else
            echo "PR from develop to main already exists: $PR_EXISTS"
          fi